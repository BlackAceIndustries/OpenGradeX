<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SharpGL.WinForms</name>
    </assembly>
    <members>
        <member name="T:SharpGL.OpenGLControl">
            <summary>
            This is the basic OpenGL control object, it gives all of the basic OpenGL functionality.
            </summary>
        </member>
        <member name="M:SharpGL.OpenGLControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGL.OpenGLControl"/> class.
            </summary>
        </member>
        <member name="M:SharpGL.OpenGLControl.SetupDrawingTimer">
            <summary>
            Setups the drawing timer, based on the framerate settings.
            </summary>
        </member>
        <member name="M:SharpGL.OpenGLControl.InitialiseOpenGL">
            <summary>
            Initialises OpenGL.
            </summary>
        </member>
        <member name="M:SharpGL.OpenGLControl.DoRender">
            <summary>
            Manually perform rendering.
            </summary>
        </member>
        <member name="M:SharpGL.OpenGLControl.Render(System.Drawing.Graphics)">
            <summary>
            Renders to the specified graphics.
            </summary>
            <param name="graphics">The graphics to render to.</param>
        </member>
        <member name="M:SharpGL.OpenGLControl.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.Paint"/> event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:SharpGL.OpenGLControl.OnSizeChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.SizeChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:SharpGL.OpenGLControl.DoOpenGLInitialized">
            <summary>
            Calls the OpenGL initialized function.
            </summary>
        </member>
        <member name="M:SharpGL.OpenGLControl.DoOpenGLDraw(SharpGL.RenderEventArgs)">
            <summary>
            Call this function in derived classes to do the OpenGL Draw event.
            </summary>
        </member>
        <member name="M:SharpGL.OpenGLControl.DoGDIDraw(SharpGL.RenderEventArgs)">
            <summary>
            Call this function in derived classes to do the GDI Draw event.
            </summary>
        </member>
        <member name="M:SharpGL.OpenGLControl.timerDrawing_Tick(System.Object,System.EventArgs)">
            <summary>
            Handles the Tick event of the timerDrawing control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:SharpGL.OpenGLControl.System#ComponentModel#ISupportInitialize#BeginInit">
            <summary>
            Signals the object that initialization is starting.
            </summary>
        </member>
        <member name="M:SharpGL.OpenGLControl.System#ComponentModel#ISupportInitialize#EndInit">
            <summary>
            Signals the object that initialization is complete.
            </summary>
        </member>
        <member name="F:SharpGL.OpenGLControl.timerDrawing">
            <summary>
            The timer used for drawing the control.
            </summary>
        </member>
        <member name="F:SharpGL.OpenGLControl.gl">
            <summary>
            The OpenGL object for the control.
            </summary>
        </member>
        <member name="F:SharpGL.OpenGLControl.stopwatch">
            <summary>
            A stopwatch used for timing rendering.
            </summary>
        </member>
        <member name="F:SharpGL.OpenGLControl.renderContextType">
            <summary>
            The render context type.
            </summary>
        </member>
        <member name="F:SharpGL.OpenGLControl.frameTime">
            <summary>
            The last frame time in milliseconds.
            </summary>
        </member>
        <member name="F:SharpGL.OpenGLControl.frameRate">
            <summary>
            The framerate, in hertz.
            </summary>
        </member>
        <member name="F:SharpGL.OpenGLControl.openGLVersion">
            <summary>
            The default desired OpenGL version.
            </summary>
        </member>
        <member name="F:SharpGL.OpenGLControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:SharpGL.OpenGLControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SharpGL.OpenGLControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="E:SharpGL.OpenGLControl.OpenGLInitialized">
            <summary>
            Occurs when OpenGL has been initialized.
            </summary>
        </member>
        <member name="E:SharpGL.OpenGLControl.OpenGLDraw">
            <summary>
            Occurs when OpenGL drawing should be performed.
            </summary>
        </member>
        <member name="E:SharpGL.OpenGLControl.GDIDraw">
            <summary>
            Occurs when GDI drawing should be performed.
            </summary>
        </member>
        <member name="E:SharpGL.OpenGLControl.Resized">
            <summary>
            Occurs when the control is resized. Can be used to perform custom viewport projections.
            </summary>
        </member>
        <member name="P:SharpGL.OpenGLControl.OpenGL">
            <summary>
            Gets the OpenGL object.
            </summary>
            <value>The OpenGL.</value>
        </member>
        <member name="P:SharpGL.OpenGLControl.DrawFPS">
            <summary>
            Gets or sets a value indicating whether to draw FPS information.
            </summary>
            <value>
              <c>true</c> if FPS info should be drawn; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SharpGL.OpenGLControl.FrameRate">
            <summary>
            Gets or sets the frame rate, in Hertz.
            </summary>
            <value>
            The frame rate, in Hertz.
            </value>
        </member>
        <member name="P:SharpGL.OpenGLControl.RenderContextType">
            <summary>
            Gets or sets the type of the render context.
            </summary>
            <value>
            The type of the render context.
            </value>
        </member>
        <member name="P:SharpGL.OpenGLControl.OpenGLVersion">
            <summary>
            Gets or sets the desired OpenGL version.
            </summary>
            <value>
            The desired OpenGL version.
            </value>
        </member>
        <member name="P:SharpGL.OpenGLControl.RenderTrigger">
            <summary>
            Gets or sets the render trigger.
            </summary>
            <value>
            The render trigger.
            </value>
        </member>
        <member name="T:SharpGL.RenderEventHandler">
            <summary>
            Delegate for a Render Event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The <see cref="T:SharpGL.RenderEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:SharpGL.RenderEventArgs">
            <summary>
            The RenderEventArgs - arguments used for render envets.
            </summary>
        </member>
        <member name="M:SharpGL.RenderEventArgs.#ctor(System.Drawing.Graphics)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGL.RenderEventArgs"/> class.
            </summary>
            <param name="graphics">The graphics.</param>
        </member>
        <member name="P:SharpGL.RenderEventArgs.Graphics">
            <summary>
            Gets the graphics.
            </summary>
        </member>
        <member name="T:SharpGL.RenderTrigger">
            <summary>
            The RenderingMode - specifies how and when rendering 
            will occur in an OpenGL control.
            </summary>
        </member>
        <member name="F:SharpGL.RenderTrigger.TimerBased">
            <summary>
            The Default RenderingMode, TimerBased. This mode means that
            a timer will be set up based on the FPS property of the control.
            </summary>
        </member>
        <member name="F:SharpGL.RenderTrigger.Manual">
            <summary>
            Rendering must be performed manually by using the DoRender function.
            </summary>
        </member>
        <member name="T:SharpGL.Vertex">
            <summary>
            The Vertex class represents a 3D point in space.
            </summary>
        </member>
        <member name="M:SharpGL.Vertex.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGL.Vertex"/> struct.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="z">The z.</param>
        </member>
        <member name="M:SharpGL.Vertex.#ctor(SharpGL.Vertex)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGL.Vertex"/> struct.
            </summary>
            <param name="vertex">The vertex.</param>
        </member>
        <member name="M:SharpGL.Vertex.Set(System.Single,System.Single,System.Single)">
            <summary>
            Sets the specified X.
            </summary>
            <param name="X">The X.</param>
            <param name="Y">The Y.</param>
            <param name="Z">The Z.</param>
        </member>
        <member name="M:SharpGL.Vertex.Push(System.Single,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="X"></param>
            <param name="Y"></param>
            <param name="Z"></param>
        </member>
        <member name="M:SharpGL.Vertex.op_Addition(SharpGL.Vertex,SharpGL.Vertex)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:SharpGL.Vertex.op_Subtraction(SharpGL.Vertex,SharpGL.Vertex)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:SharpGL.Vertex.op_Multiply(SharpGL.Vertex,SharpGL.Vertex)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:SharpGL.Vertex.op_Multiply(SharpGL.Vertex,System.Single)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:SharpGL.Vertex.op_Multiply(SharpGL.Vertex,SharpGL.Matrix)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:SharpGL.Vertex.op_Multiply(SharpGL.Matrix,SharpGL.Vertex)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:SharpGL.Vertex.op_Division(SharpGL.Vertex,System.Single)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:SharpGL.Vertex.ScalarProduct(SharpGL.Vertex)">
            <summarY>
            This finds the Scalar Product (Dot Product) of two vectors.
            </summarY>
            <param name="rhs">The right hand side of the equation.</param>
            <returns>A Scalar Representing the Dot-Product.</returns>
        </member>
        <member name="M:SharpGL.Vertex.VectorProduct(SharpGL.Vertex)">
            <summarY>
            Find the Vector product (cross product) of two vectors.
            </summarY>
            <param name="rhs">The right hand side of the equation.</param>
            <returns>The Cross Product.</returns>
        </member>
        <member name="M:SharpGL.Vertex.Magnitude">
            <summarY>
            If You use this as a Vector, then call this function to get the vector
            magnitude.
            </summarY>
            <returns></returns>
        </member>
        <member name="M:SharpGL.Vertex.UnitLength">
            <summarY>
            Make this vector unit length.
            </summarY>
        </member>
        <member name="M:SharpGL.Vertex.Normalize">
            <summary>
            Normalizes this instance.
            </summary>
        </member>
        <member name="P:SharpGL.Vertex.X">
            <summary>
            The X coordinate.
            </summary>
        </member>
        <member name="P:SharpGL.Vertex.Y">
            <summary>
            The Y coordinate.
            </summary>
        </member>
        <member name="P:SharpGL.Vertex.Z">
            <summary>
            The Z coordinate.
            </summary>
        </member>
    </members>
</doc>
